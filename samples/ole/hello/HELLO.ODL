/*************************************************************************
**
**  This is a part of the Microsoft Source Code Samples.
**
**  Copyright (C) 1992-1995 Microsoft Corporation. All rights reserved.
**
**  This source code is only intended as a supplement to Microsoft Development
**  Tools and/or WinHelp documentation.  See these sources for detailed
**  information regarding the Microsoft samples programs.
**
**  OLE Automation Hello 2.0 Application.
**
**  hello.odl
**
**  Object Description source file.
**
**  Written by Microsoft Product Support Services, Windows Developer Support
**
*************************************************************************/ 

[
  uuid(F37C8060-4AD5-101B-B826-00DD01103DE1),              // LIBID_Hello
  helpstring("Hello 2.0 Type Library"),
  lcid(0x09),
  version(2.0)
] 
library Hello
{
#ifdef WIN32
    importlib("stdole2.tlb");
#else
    importlib("stdole.tlb");
#endif
    [
      uuid(F37C8062-4AD5-101B-B826-00DD01103DE1),          // IID_IHello                       
      helpstring("Application object for the Hello application."),   
      oleautomation,
      dual
    ]
    interface IHello : IDispatch                         
    {
        [propget, helpstring("Returns the application of the object.")]
        HRESULT Application([out, retval] IHello** retval);
        
        [propget, helpstring("Returns the full name of the application.")]
        HRESULT FullName([out, retval] BSTR* retval);
        
        [propget, id(0), helpstring("Returns the name of the application.")]
        HRESULT Name([out, retval] BSTR* retval);
        
        [propget, helpstring("Returns the parent of the object.")]
        HRESULT Parent([out, retval] IHello** retval);
        
        [propput]
        HRESULT Visible([in] boolean VisibleFlag);
        [propget, helpstring("Sets or returns whether the main window is visible.")]
        HRESULT Visible([out, retval] boolean* retval);
        
        [helpstring("Exits the application.")]
        HRESULT Quit();
        
        [propput, helpstring("Sets or returns the hello message to be used.")]
        HRESULT HelloMessage([in] BSTR Message);         
        [propget] 
        HRESULT HelloMessage([out, retval] BSTR *retval);
        
        [helpstring("Say Hello using HelloMessage.")]        
        HRESULT SayHello();        
    } 
                    
    
    [
       uuid(F37C8061-4AD5-101B-B826-00DD01103DE1),          // CLSID_Hello
       helpstring("Hello Class"),
       appobject
    ]                                             
    coclass Hello
    {   
        [default]          interface IHello;
                           interface IDispatch;
    }
}
