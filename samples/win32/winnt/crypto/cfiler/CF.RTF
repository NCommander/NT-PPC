{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f4\froman\fcharset0\fprq2 Times New Roman;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\f4\fs20 
\snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\info{\title Functional Specification for Cryptfiler}{\author A Valued Microsoft Customer}{\operator A Valued Microsoft Customer}{\creatim\yr1995\mo8\dy22\hr17\min23}
{\revtim\yr1995\mo8\dy23\hr17\min34}{\printim\yr1995\mo8\dy22\hr17\min28}{\version7}{\edmins21}{\nofpages0}{\nofwords0}{\nofchars0}{\vern49213}}\widowctrl\ftnbj\aenddoc\formshade \fet0\sectd \linex0\endnhere {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \f4\fs20 {\fs28 Cryptfiler Functional Specification
\par }\pard 
\par I. Introduction{\b\fs32 
\par }
\par \pard Cryptfiler is a file encryptor which uses the Microsoft Cryptographic API (CAPI) and the Win32 SDK. Its GUI is an adaptation of Filer, a Win32 file management sample application which is written in C. C
ryptfiler demonstrates a large part of the capabilities of CAPI, including encryption, digital signature, and password-based key generation.
\par \pard 
\par \pard Cryptfiler\rquote s GUI contains two listboxes: the directory listbox and the file listbox. Users navigate about their directory tree by double-clicking on the directory listbox, which is located on the left of Cryptfiler\rquote 
s client area. Double-clicking on an entry in the directory listbox once causes the directory to be expanded, with all its subdirectories enumerated and di
splayed indented below the entry. Double-clicking on the entry a second time causes the entry to be collapsed. Users can perform cryptographic operations on files and directories by selecting them in the file listbox and selecting operations from the menu
. When a user double-clicks on an item in the file listbox, Cryptfiler encrypts the file and displays its filename in gray text. Note: The plaintext file is deleted. A second double-click causes Cryptfiler to decrypt the file and display its filename in i
ts original color. Users sign files by first selecting them in the file listbox and then selecting \ldblquote {\ul S}ign\rdblquote  from the {\ul F}
ile menu. Signed files appear in red text. Users can verify the signature of a file by selecting the file in the file listbox and choosing \ldblquote {\ul V}erify\rdblquote 
 from the file menu. An encrypted file that has been signed appears in light red text. When users encrypt and then sign files, they know that adversaries have not encrypted the files. Users can select the algorithms they wish to use for encryption and
 digital signature from the {\ul O}ptions menu.
\par \pard 
\par \pard 
The first time a user runs cryptfiler, the application creates a key called fnKey and stores the key in the registry. From then on, when the user starts cryptfiler, the application access fnKey from the registry. Cryptfiler uses fnKey to encrypt file and 
directory names. When a user chooses to encrypt a file, Cryptfiler generates a session key with which to encrypt the file, exports the key, generates a random filename with a .CRP extension, creates a hidden file w
ith this name, encrypts the name of the plaintext file with fnKey, stores the encrypted filename to the .CRP file, stores the exported key to the .CRP file, encrypts the data with the session key, stores the encrypted content to the .CRP file, and deletes
 the plaintext file. When the user chooses to encrypt a directory, Cryptfiler encrypts the name of the directory with fnKey, stores the data in a file called \ldblquote dirinfo\rdblquote 
 in the directory, generates a random name with a .CRP extension, renames the directory us
ing this name, hides the directory, encrypts all the files in the directory, and recursively encrypts all subdirectories. If the fnKey is lost or tampered with, Cryptfiler displays the file in the file listbox as \ldblquote RecoverMe\rdblquote 
 in gray text. Although the user can recover the original file, the original filename is lost when fnKey is lost.
\par \pard 
\par \pard The \ldblquote Password\rdblquote  item under the {\ul O}ptions menu prompts the user for a password. Cryptfiler generates a session key with this password the next time the user encrypts a file. Whe
n the user wishes to decrypt that file, the application again prompts the user for the password.
\par \pard 
\par \pard 
Cryptfiler never displays the random file and directory names it generates. Cryptfiler only displays the original names. Cryptfiler accomplishes this by maintaining two string tables: one for the directory listbox and one for the file listbox. Each entry 
in the string table has a hidden and displayed field. The hidden field holds the pathname as it appears on the disk. The displayed field holds the pathname as it appeared on the disk before encryption.
\par \pard 
\par \pard Cryptfiler stores all signatures of files along with the ALG_ID\rquote s of the hashing algorithms used to generate the signatures as separate, hidden files in the hidden directory \ldblquote sig\rdblquote 
 off the root on the same drive as the system directory. This directory is h
idden by default. Users may choose to hide or unhide this directory and its contents. The filenames of these files are SHA hashes of the full pathnames of the files. It is necessary to convert these 20-byte hashes
 before using them as filenames since there are only 2^6 rather than 2^8 legal characters for filenames. By choosing 64 (2^6) characters for filenames (A-Z, a-z, 0-9, +, and _), it is possible to convert 3 bytes of the hash, containing 24 = 8 * 3 bits of 
data, to 4 bytes of the filename, also containing 24 = 6 * 4 bits of data. Cryptfiler adds 4 null bytes to the hash in order to have 24 bytes with which to perform the conversion. Cryptfiler knows that a file has a signature if the hash of its full pathna
me is one of the files in the sig directory. To increase efficiency, Cryptfiler creates in memory a table of the signature files when filling the file listbox.
\par \pard 
\par \pard 
The default encryption algorithm is RC2, which is not fixed. For password-based key generation, MD4 is the hashing algorithm, and it cannot be changed. The default hashing algorithm for generating signature files is MD4, which the user can change. The alg
orithm used to generate fnKey is RC4, which is fixed. The algorithm used to hash pathnames of file
s in order to generate signature filenames is SHA, which is fixed. It is necessary to #define WIN95 when compiling under Windows 95. Making Cryptfiler a Unicode application simply requires a #define UNICODE.
\par \pard 
\par Encrypted files are structured  in the following way:
\par 1. Filename encrypted with fnKey (RC4). - 256 * sizeof(TCHAR) bytes
\par \pard 2. Exported key blob length - sizeof(DWORD) bytes. This is zero if the user selected a password-based key generation algorithm
\par \pard 3. Key blob - (key blob length bytes) (0 bytes if key generated from password)
\par 4. Encrypted content
\par 
\par II. Menus
\par 
\par \tab A. {\ul F}ile: Contains items which perform cryptographic operations on files.
\par \tab 
\par \tab B. {\ul V}iew: Contains items which change the view of the file and directory listboxes.
\par 
\par \tab C. {\ul D}rives: Contains a list of available drives.
\par 
\par \tab D. {\ul O}ptions: Contains items which set options for the cryptographic operations
\par 
\par \tab E. {\ul H}elp: Contains information for the user to obtain help and version information.
\par 
\par III. {\ul F}ile Menu
\par 
\par \tab A. {\ul E}ncrypt/Decrypt: If the selected file in the file listbox is plaintext, this menu item causes the
\par \tab application to encrypt the file. If the selected item is encrypted, this menu item causes the
\par \tab application to decrypt the file. During encryption, the plaintext file is deleted. During decryption,
\par \tab the encrypted file is deleted.
\par 
\par \tab B. {\ul S}ign: Creates a separate digital signature of the selected file in the file listbox. This file is stored
\par \tab in the directory sig off the root on the same drive as the system directory. If a signature file already
\par \tab exists, the application asks users if they want to delete the signature file and replace it with a new
\par \tab signature file.
\par 
\par \tab C. {\ul V}erify: Verifies the signature of the file selected in the file listbox.
\par 
\par \tab D. {\ul E}xit: Terminates the application.
\par 
\par IV. {\ul V}iew Menu
\par 
\par \tab A. {\ul R}efresh: Refreshes the view of the current drive to that of the root. 
\par 
\par \tab B. {\ul E}xpand Tree: Recursively expands the directory tree in the directory listbox.
\par 
\par \tab C. {\ul S}wap Sides: Swaps the file and directory listboxes.
\par 
\par V. {\ul D}rives Menu: Lists available drives. When a user selects one of the items in this menu, the application
\par switches to that drive.
\par 
\par VI. {\ul O}ptions Menu
\par 
\par \tab A. Choose {\ul E}ncryption Algorithm...: Prompts the user with a dialog box with radio buttons for each
\par \tab algorithm for generating session keys.
\par 
\par \tab B. Enter {\ul P}assword...: Prompts the user with a dialog box with a field for a password with which to
\par \tab generate session keys.
\par 
\par \pard \tab C. Choose {\ul S}ignature Algorithm...: Prompts the user with a dialog box containing radio buttons for \tab various algorithms with which to create digital signatures.
\par \pard 
\par \tab D. {\ul H}ide Signatures (either checked or unchecked): Toggles the hidden or shown status of the
\par \tab directory containing digital signatures as well as the hidden or shown status of the signatures
\par \tab themselves.
\par 
\par VII. {\ul H}elp Menu
\par 
\par \tab A. {\ul C}ryptfiler Help...: Loads the Cryptfiler help file.
\par 
\par \tab B. {\ul A}bout Cryptfiler...: Shows the Cryptfiler version information.
\par 
\par }